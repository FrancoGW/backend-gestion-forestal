üîê GU√çA DE AUTENTICACI√ìN - SISTEMA DE GESTI√ìN FORESTAL
================================================================

ENDPOINT DE LOGIN:
POST /api/usuarios_admin/login

CREDENCIALES DISPONIBLES:
========================

üëë ADMINISTRADORES:
- Email: admin@sistema.com
- Password: admin
- Rol: admin

üë®‚Äçüíº SUPERVISORES:
- Email: alejandro.wayer@supervisor.com
- Password: 123
- Rol: supervisor

- Email: armando.gamboa@supervisor.com
- Password: 123
- Rol: supervisor

- Email: beatriz.reitano@supervisor.com
- Password: 123
- Rol: supervisor

- Email: carlos.bardelli@supervisor.com
- Password: 123
- Rol: supervisor

- Email: cecilia.pizzini@supervisor.com
- Password: 123
- Rol: supervisor

- Email: diego.nonino@supervisor.com
- Password: 123
- Rol: supervisor

- Email: fabio.cancian@supervisor.com
- Password: 123
- Rol: supervisor

- Email: fernando.doval@supervisor.com
- Password: 123
- Rol: supervisor

- Email: gabriel.cardozo@supervisor.com
- Password: 123
- Rol: supervisor

- Email: gonzalo.alvarez@supervisor.com
- Password: 123
- Rol: supervisor

- Email: helian.lytwyn@supervisor.com
- Password: 123
- Rol: supervisor

- Email: javier.avendano@supervisor.com
- Password: 123
- Rol: supervisor

- Email: luis.arriola@supervisor.com
- Password: 123
- Rol: supervisor

- Email: martin.alvarez@supervisor.com
- Password: 123
- Rol: supervisor

- Email: martin.spriegel@supervisor.com
- Password: 123
- Rol: supervisor

- Email: paula.montenegro@supervisor.com
- Password: 123
- Rol: supervisor

- Email: santiago.gouin@supervisor.com
- Password: 123
- Rol: supervisor

- Email: ulises.cosoli@supervisor.com
- Password: 123
- Rol: supervisor

üè¢ PROVEEDORES:
- Email: contacto@forestadorauruguay.com
- Password: 123
- Rol: provider
- CUIT: 30-12345678-9
- Tel√©fono: 11-2345-6789

- Email: contacto@elombu.com
- Password: 123
- Rol: provider
- CUIT: 30-98765432-1
- Tel√©fono: 11-8765-4321

- Email: contacto@kauffmann.com
- Password: 123
- Rol: provider
- CUIT: 30-34567890-1

EJEMPLO DE REQUEST PARA LOGIN:
=============================

// Ejemplo con fetch
const response = await fetch('/api/usuarios_admin/login', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    email: 'admin@sistema.com',
    password: 'admin'
  })
});

const data = await response.json();

// Ejemplo con Axios
const response = await axios.post('/api/usuarios_admin/login', {
  email: 'admin@sistema.com',
  password: 'admin'
});

RESPONSE DE √âXITO:
=================
{
  "success": true,
  "message": "Autenticaci√≥n exitosa",
  "data": {
    "_id": "507f1f77bcf86cd799439011",
    "nombre": "Administrador",
    "apellido": "Sistema",
    "email": "admin@sistema.com",
    "rol": "admin",
    "cuit": null,
    "telefono": null,
    "activo": true,
    "fechaCreacion": "2024-01-01T00:00:00.000Z",
    "fechaActualizacion": "2024-01-01T00:00:00.000Z"
  }
}

RESPONSE DE ERROR:
=================
{
  "success": false,
  "message": "Credenciales inv√°lidas"
}

IMPLEMENTACI√ìN EN EL FRONTEND:
=============================

// hooks/use-auth.ts
import { useState, useEffect } from 'react';

interface User {
  _id: string;
  nombre: string;
  apellido: string;
  email: string;
  rol: 'admin' | 'supervisor' | 'provider';
  cuit?: string;
  telefono?: string;
  activo: boolean;
  fechaCreacion: string;
  fechaActualizacion: string;
}

interface LoginResponse {
  success: boolean;
  message: string;
  data?: User;
  error?: string;
}

export const useAuth = () => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Verificar si hay un usuario en sessionStorage al cargar
    const storedUser = sessionStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
    setLoading(false);
  }, []);

  const login = async (email: string, password: string): Promise<LoginResponse> => {
    try {
      const response = await fetch('/api/usuarios_admin/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();
      
      if (data.success) {
        const user = data.data;
        sessionStorage.setItem('user', JSON.stringify(user));
        setUser(user);
        return { success: true, data: user };
      } else {
        return { success: false, error: data.message };
      }
    } catch (error) {
      return { success: false, error: 'Error de conexi√≥n' };
    }
  };

  const logout = () => {
    sessionStorage.removeItem('user');
    setUser(null);
  };

  const isAuthenticated = () => {
    return user !== null;
  };

  const hasRole = (role: string) => {
    return user?.rol === role;
  };

  return {
    user,
    loading,
    login,
    logout,
    isAuthenticated,
    hasRole
  };
};

USO EN COMPONENTES:
==================

// Componente de Login
import { useAuth } from '../hooks/use-auth';

const LoginForm = () => {
  const { login } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const result = await login(email, password);
    
    if (result.success) {
      // Redirigir seg√∫n el rol
      if (result.data?.rol === 'admin') {
        window.location.href = '/admin';
      } else if (result.data?.rol === 'supervisor') {
        window.location.href = '/supervisor';
      } else {
        window.location.href = '/provider';
      }
    } else {
      setError(result.error || 'Error de autenticaci√≥n');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
        required
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Contrase√±a"
        required
      />
      {error && <p className="error">{error}</p>}
      <button type="submit">Iniciar Sesi√≥n</button>
    </form>
  );
};

PROTECCI√ìN DE RUTAS:
====================

// Componente para proteger rutas
const ProtectedRoute = ({ children, requiredRole }: { children: React.ReactNode, requiredRole?: string }) => {
  const { user, loading, hasRole } = useAuth();

  if (loading) {
    return <div>Cargando...</div>;
  }

  if (!user) {
    return <div>Debes iniciar sesi√≥n</div>;
  }

  if (requiredRole && !hasRole(requiredRole)) {
    return <div>No tienes permisos para acceder a esta p√°gina</div>;
  }

  return <>{children}</>;
};

NOTAS IMPORTANTES:
=================
1. URL Base: Aseg√∫rate de que el frontend est√© apuntando a la URL correcta del backend
2. CORS: El backend ya tiene CORS configurado
3. SessionStorage: Los datos del usuario se guardan en sessionStorage para persistir la sesi√≥n
4. Roles: Cada usuario tiene un rol espec√≠fico que determina sus permisos
5. Contrase√±as: Por ahora est√°n en texto plano (como estaban hardcodeadas originalmente)

ENDPOINTS ADICIONALES:
=====================
- GET /api/usuarios_admin - Obtener todos los usuarios
- GET /api/usuarios_admin/:id - Obtener usuario por ID
- POST /api/usuarios_admin - Crear nuevo usuario
- PUT /api/usuarios_admin/:id - Actualizar usuario
- DELETE /api/usuarios_admin/:id - Eliminar usuario (soft delete)
- GET /api/usuarios_admin/rol/:rol - Obtener usuarios por rol 