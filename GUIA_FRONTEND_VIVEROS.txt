# üöÄ GU√çA COMPLETA: Sistema de Viveros con Clones - Frontend

## üìã Endpoints Disponibles

```javascript
// Base URL de la API
const API_BASE_URL = 'https://tu-dominio.vercel.app/api'; // Cambiar por tu URL de producci√≥n

// Endpoints disponibles:
GET    /api/viveros              // Obtener todos los viveros
POST   /api/viveros              // Crear nuevo vivero
GET    /api/viveros/:id          // Obtener vivero espec√≠fico
PUT    /api/viveros/:id          // Actualizar vivero
DELETE /api/viveros/:id          // Eliminar vivero
GET    /api/viveros/estadisticas // Obtener estad√≠sticas
GET    /api/viveros/:id/clones   // Obtener clones de un vivero
```

## üèóÔ∏è Estructura de Datos

### Vivero Completo
```javascript
const viveroData = {
  nombre: "Vivero Paul",
  ubicacion: "Misiones",
  contacto: "Juan P√©rez",
  activo: true,
  especies: [
    "507f1f77bcf86cd799439011", // ID de especie existente
    "Eucalyptus personalizado",  // Texto personalizado
    "Pino h√≠brido nuevo"         // Texto personalizado
  ],
  clones: [
    {
      _id: "1703123456789",
      codigo: "FA 13",
      especieAsociada: "Eucalipto",
      origen: "Forestal Argentina",
      descripcion: "Clon de alto rendimiento",
      caracteristicas: "Resistente a sequ√≠a",
      activo: true
    },
    {
      _id: "1703123456790",
      codigo: "INTA 36",
      especieAsociada: "Eucalipto",
      origen: "INTA",
      descripcion: "Clon de investigaci√≥n",
      caracteristicas: "Alto crecimiento",
      activo: true
    }
  ]
};
```

## üîß Funciones de Ejemplo

### 1. Crear Vivero
```javascript
async function crearVivero(viveroData) {
  try {
    const response = await fetch('/api/viveros', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(viveroData)
    });
    
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Vivero creado:', result.data);
      return result.data;
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    console.error('‚ùå Error al crear vivero:', error);
    throw error;
  }
}
```

### 2. Obtener Todos los Viveros
```javascript
async function obtenerViveros(filtros = {}) {
  try {
    const params = new URLSearchParams(filtros);
    const response = await fetch(`/api/viveros?${params}`);
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Viveros obtenidos:', result.data);
      return result.data;
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    console.error('‚ùå Error al obtener viveros:', error);
    throw error;
  }
}

// Ejemplos de uso:
// obtenerViveros() // Todos los viveros
// obtenerViveros({ search: 'paul' }) // Buscar por nombre
// obtenerViveros({ activo: 'true' }) // Solo activos
// obtenerViveros({ ubicacion: 'misiones' }) // Por ubicaci√≥n
```

### 3. Obtener Vivero por ID
```javascript
async function obtenerViveroPorId(id) {
  try {
    const response = await fetch(`/api/viveros/${id}`);
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Vivero obtenido:', result.data);
      return result.data;
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    console.error('‚ùå Error al obtener vivero:', error);
    throw error;
  }
}
```

### 4. Actualizar Vivero
```javascript
async function actualizarVivero(id, datosActualizacion) {
  try {
    const response = await fetch(`/api/viveros/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(datosActualizacion)
    });
    
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Vivero actualizado:', result.data);
      return result.data;
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    console.error('‚ùå Error al actualizar vivero:', error);
    throw error;
  }
}
```

### 5. Eliminar Vivero
```javascript
async function eliminarVivero(id) {
  try {
    const response = await fetch(`/api/viveros/${id}`, {
      method: 'DELETE'
    });
    
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Vivero eliminado');
      return result;
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    console.error('‚ùå Error al eliminar vivero:', error);
    throw error;
  }
}
```

### 6. Obtener Clones de un Vivero
```javascript
async function obtenerClonesDeVivero(id) {
  try {
    const response = await fetch(`/api/viveros/${id}/clones`);
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Clones obtenidos:', result.data);
      return result.data;
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    console.error('‚ùå Error al obtener clones:', error);
    throw error;
  }
}
```

### 7. Obtener Estad√≠sticas
```javascript
async function obtenerEstadisticas() {
  try {
    const response = await fetch('/api/viveros/estadisticas');
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Estad√≠sticas:', result.data);
      return result.data;
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    console.error('‚ùå Error al obtener estad√≠sticas:', error);
    throw error;
  }
}
```

## üìä Estructura de Respuestas

### Respuesta Exitosa
```javascript
{
  "success": true,
  "data": {
    "_id": "507f1f77bcf86cd799439011",
    "nombre": "Vivero Paul",
    "ubicacion": "Misiones",
    "contacto": "Juan P√©rez",
    "activo": true,
    "especies": ["Eucalyptus personalizado", "Pino h√≠brido nuevo"],
    "clones": [
      {
        "_id": "1703123456789",
        "codigo": "FA 13",
        "especieAsociada": "Eucalipto",
        "origen": "Forestal Argentina",
        "descripcion": "Clon de alto rendimiento",
        "caracteristicas": "Resistente a sequ√≠a",
        "activo": true
      }
    ],
    "fechaCreacion": "2024-01-15T10:30:00.000Z",
    "fechaActualizacion": "2024-01-15T10:30:00.000Z"
  },
  "message": "Vivero creado exitosamente"
}
```

### Respuesta de Error
```javascript
{
  "success": false,
  "error": "Ya existe un vivero con ese nombre"
}
```

### Respuesta de Lista con Paginaci√≥n
```javascript
{
  "success": true,
  "data": [...], // Array de viveros
  "total": 10,
  "page": 1,
  "limit": 10,
  "totalPages": 1
}
```

### Respuesta de Estad√≠sticas
```javascript
{
  "success": true,
  "data": {
    "total": 10,
    "activos": 8,
    "inactivos": 2,
    "totalClones": 45,
    "viverosConEspecies": 7,
    "viverosSinEspecies": 3
  }
}
```

## üéØ Ejemplo de Uso Completo

```javascript
// Ejemplo completo de uso en React/Vue/Angular
async function ejemploCompleto() {
  try {
    // 1. Crear un vivero
    const nuevoVivero = await crearVivero({
      nombre: "Vivero Paul",
      ubicacion: "Misiones",
      contacto: "Juan P√©rez",
      activo: true,
      especies: ["Eucalyptus", "Pino"],
      clones: [
        {
          _id: "1703123456789",
          codigo: "FA 13",
          especieAsociada: "Eucalipto",
          origen: "Forestal Argentina",
          descripcion: "Clon de alto rendimiento",
          caracteristicas: "Resistente a sequ√≠a",
          activo: true
        }
      ]
    });
    
    // 2. Obtener todos los viveros
    const viveros = await obtenerViveros();
    
    // 3. Obtener estad√≠sticas
    const estadisticas = await obtenerEstadisticas();
    
    // 4. Obtener clones del vivero creado
    const clones = await obtenerClonesDeVivero(nuevoVivero._id);
    
    // 5. Actualizar el vivero
    const viveroActualizado = await actualizarVivero(nuevoVivero._id, {
      nombre: "Vivero Paul Actualizado",
      ubicacion: "Misiones, Argentina"
    });
    
    console.log('‚úÖ Ejemplo completado exitosamente');
    
  } catch (error) {
    console.error('‚ùå Error en el ejemplo:', error);
  }
}
```

## üîç Filtros Disponibles

```javascript
// Par√°metros de b√∫squeda y filtros
const filtros = {
  search: 'paul',           // Buscar en nombre, ubicaci√≥n, contacto
  activo: 'true',           // Filtrar por estado activo/inactivo
  ubicacion: 'misiones',    // Filtrar por ubicaci√≥n
  especie: 'eucalipto',      // Filtrar por especie
  page: 1,                  // P√°gina para paginaci√≥n
  limit: 10                 // L√≠mite de resultados por p√°gina
};
```

## ‚ö†Ô∏è Validaciones Importantes

### Campos Requeridos
- `nombre`: String √∫nico (requerido)
- `clones[].codigo`: String √∫nico dentro del vivero (requerido)
- `clones[].especieAsociada`: String (requerido)

### Campos Opcionales
- `ubicacion`: String (default: "")
- `contacto`: String (default: "")
- `activo`: Boolean (default: true)
- `especies`: Array de strings (IDs o texto personalizado)
- `clones[].origen`: String (default: "")
- `clones[].descripcion`: String (default: "")
- `clones[].caracteristicas`: String (default: "")
- `clones[].activo`: Boolean (default: true)

## üö® C√≥digos de Error

- `400`: Datos inv√°lidos
- `404`: Vivero no encontrado
- `409`: Nombre de vivero duplicado
- `422`: C√≥digo de clon duplicado en el mismo vivero
- `500`: Error interno del servidor

## üìù Notas Importantes

1. **Especies mixtas**: El campo `especies` puede contener tanto IDs de especies existentes como texto personalizado
2. **Clones √∫nicos**: Cada c√≥digo de clon debe ser √∫nico dentro del mismo vivero
3. **Timestamps autom√°ticos**: Las fechas de creaci√≥n y actualizaci√≥n se manejan autom√°ticamente
4. **Validaci√≥n de especies**: Si se env√≠a un ID de especie, se verifica que exista en la colecci√≥n especies
5. **Respuestas consistentes**: Todas las respuestas siguen el formato `{ success: boolean, data: any, message?: string }`

## üéâ ¬°Sistema Listo para Usar!

El backend est√° completamente implementado y listo para recibir requests del frontend. Todos los endpoints est√°n funcionando y validados. Solo necesitas cambiar la URL base por tu dominio de producci√≥n.
